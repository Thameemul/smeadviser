{"version":3,"sources":["webpack:///src/modules/addnewquery/components/addnewquery/addnewquery.component.html","webpack:///src/modules/addnewquery/containers/newquery/newquery.component.html","webpack:///src/modules/addnewquery/addnewquery-routing.module.ts","webpack:///src/modules/addnewquery/addnewquery.module.ts","webpack:///src/modules/addnewquery/components/addnewquery/addnewquery.component.scss","webpack:///src/modules/addnewquery/components/addnewquery/addnewquery.component.ts","webpack:///src/modules/addnewquery/components/index.ts","webpack:///src/modules/addnewquery/containers/index.ts","webpack:///src/modules/addnewquery/containers/newquery/newquery.component.scss","webpack:///src/modules/addnewquery/containers/newquery/newquery.component.ts","webpack:///src/modules/addnewquery/directives/index.ts","webpack:///src/modules/addnewquery/directives/sortable.directive.ts","webpack:///src/modules/addnewquery/guards/addnewquery.guard.ts","webpack:///src/modules/addnewquery/guards/index.ts","webpack:///src/modules/addnewquery/services/index.ts"],"names":["ROUTES","path","canActivate","component","data","title","breadcrumbs","icon","text","link","active","AddNewQueryRoutingModule","imports","forChild","exports","AddNewQueryModule","initializeApp","firebaseConfig","providers","declarations","AddNewQueryComponent","queryservice","userskillservice","radioTitle","radioItems","selectedOption","category","htmlContent","config","editable","spellcheck","height","minHeight","placeholder","translate","defaultParagraphSeparator","defaultFontName","resetForm","model","id","querydesc","form","reset","createQuery","alert","selector","changeDetection","OnPush","template","components","containers","NewQueryComponent","directives","rotate","asc","desc","SBSortableHeaderDirective","direction","sort","emit","column","sbSortable","AddNewQueryGuard","guards","services"],"mappings":"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","file":"modules-addnewquery-addnewquery-routing-module-es5.js","sourcesContent":["export default \"<div class=\\\"row justify-content-center\\\">\\n    <div class=\\\"col-lg-12\\\">\\n        <div class=\\\"card shadow-lg border-0 rounded-lg mt-2\\\">\\n            <div class=\\\"card-header\\\">\\n                <h3 class=\\\"text-center font-weight-dark my-1\\\">Add new query</h3>\\n            </div>\\n            <div class=\\\"card-body\\\">\\n                <form #form=\\\"ngForm\\\"  (submit)=\\\"onSubmit(form)\\\">\\n                    <div class=\\\"form-row\\\">\\n                        <div class=\\\"col-md-12\\\">\\n                            <div class=\\\"form-group \\\">\\n                                <h6 class=\\\"medium mb-1 \\\">Title *</h6>\\n                                         <small class=\\\"text-muted\\\">Be specific and imagine youâ€™re asking a question to another person</small>\\n                                <input class=\\\"form-control py-4\\\" name=\\\"title\\\" #title=\\\"ngModel\\\"\\n                                    [(ngModel)]=\\\"model.title\\\" placeholder=\\\"Enter query title here..\\\"\\n                                    required /></div>\\n                            <div *ngIf=\\\"title.invalid && title.touched\\\" class=\\\"validation-error\\\">This field is\\n                                required</div>\\n                        </div>\\n\\n                    </div>\\n\\n\\n                    <div class=\\\"form-row\\\" style=\\\"height: 50px;\\\">\\n                        <h6 class=\\\"medium mb-1 \\\">{{radioTitle}} *</h6>\\n                        <label *ngFor=\\\"let radiobutton of radioItems\\\">\\n                        <input  style=\\\"width: 30px;\\\" type=\\\"radio\\\" name=\\\"category\\\" (click)=\\\"selectedOption.category = radiobutton\\\" [checked]=\\\"radiobutton === selectedOption.category\\\" >{{radiobutton}}\\n                    </label>\\n\\n                    </div>\\n\\n                    <div class=\\\"form-group\\\">\\n                        <h6 class=\\\"medium mb-1 \\\">Body *</h6>\\n                                 <small class=\\\"text-muted\\\">Include all the information someone would need to answer your question</small>\\n                        <angular-editor name=\\\"querydesc\\\" #querydesc=\\\"ngModel\\\" [(ngModel)]=\\\"model.querydesc\\\"\\n                            [config]=\\\"config\\\"></angular-editor>\\n                        <div *ngIf=\\\"querydesc.invalid && querydesc.touched\\\" class=\\\"validation-error\\\">This field is\\n                            required</div>\\n                    </div>\\n\\n                    <div class=\\\"form-row\\\">\\n                        <div class=\\\"col-md-6 form-group mt-4 mb-0 \\\">\\n                            <a class=\\\"btn btn-primary \\\" (click)=\\\"resetForm()\\\">Reset</a>\\n                        </div>\\n                        <div class=\\\"col-md-6 form-group mt-4 mb-0\\\">\\n                            <button type=\\\"submit\\\" [disabled]=\\\"form.invalid\\\"\\n                                class=\\\"btn btn-success btn-block\\\"> Submit</button>\\n                        </div>\\n                    </div>\\n\\n                </form>\\n            </div>\\n\\n        </div>\\n    </div>\\n</div>\\n\\n\\n\\n\";","export default \"<sb-layout-dashboard\\n    ><sb-dashboard-head ></sb-dashboard-head>\\n         <div class=\\\"card-body\\\"><sb-addnewquery ></sb-addnewquery></div>\\n</sb-layout-dashboard>\\n\";","/* tslint:disable: ordered-imports*/\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n/* Module */\nimport { AddNewQueryModule } from './addnewquery.module';\n\n/* Containers */\nimport * as addnewqueryContainers from './containers';\n\n/* Guards */\n\nimport { SBRouteData } from '@modules/navigation/models';\n\n/* Routes */\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        canActivate: [],\n        component: addnewqueryContainers.NewQueryComponent,\n        data: {\n            title: 'Add new Query',\n            breadcrumbs: [\n                {\n                    icon: 'book-open',\n                    text: 'addnewquery',\n                    link: '/addnewquery',\n                },\n                {\n                    text: 'addnewquery',\n                    active: true,\n                },\n            ],\n        } as SBRouteData,\n    },\n];\n\n@NgModule({\n    imports: [AddNewQueryModule, RouterModule.forChild(ROUTES)],\n    exports: [RouterModule],\n})\nexport class AddNewQueryRoutingModule {}\n","/* tslint:disable: ordered-imports*/\nimport { NgModule } from '@angular/core';\nimport { CommonModule, DecimalPipe } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { AngularEditorModule } from '@kolkov/angular-editor';\nimport { NavigationModule } from '@modules/navigation/navigation.module';\n\n//  Firebase\nimport { AngularFireModule } from '@angular/fire';\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\nimport { AngularFireStorageModule } from '@angular/fire/storage';\nimport { AngularFireAuthModule } from '@angular/fire/auth';\n\n/* Modules */\nimport { AppCommonModule } from '@common/app-common.module';\n\n/* Components */\nimport * as addnewqueryComponents from './components';\n\n/* Containers */\nimport * as addnewqueryContainers from './containers';\n\n/* Directives */\nimport * as addnewqueryDirectives from './directives';\n\n/* Guards */\nimport * as addnewqueryGuards from './guards';\n\n/* Services */\nimport * as addnewqueryServices from './services';\nimport { environment } from '../../environments/environment';\nimport * as authServices from '@modules/auth/services';\nimport { UserSkillService } from '../auth/services/userskill.service';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        ReactiveFormsModule,\n        FormsModule,\n        AppCommonModule,\n        AngularEditorModule,\n        NavigationModule,\n        AngularFireModule.initializeApp(environment.firebaseConfig),\n        AngularFirestoreModule, // firestore\n        AngularFireAuthModule, // auth\n        AngularFireStorageModule, // storage\n        FormsModule,\n    ],\n    providers: [\n        DecimalPipe,\n        ...addnewqueryServices.services,\n        ...authServices.services,\n        UserSkillService,\n        ...addnewqueryGuards.guards,\n        ...addnewqueryDirectives.directives,\n\n\n    ],\n    declarations: [\n        ...addnewqueryContainers.containers,\n        ...addnewqueryComponents.components,\n        ...addnewqueryDirectives.directives,\n    ],\n    exports: [...addnewqueryContainers.containers, ...addnewqueryComponents.components],\n})\nexport class AddNewQueryModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvbW9kdWxlcy9hZGRuZXdxdWVyeS9jb21wb25lbnRzL2FkZG5ld3F1ZXJ5L2FkZG5ld3F1ZXJ5LmNvbXBvbmVudC5zY3NzIn0= */\";","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnInit,\n    QueryList,\n    ViewChildren,\n} from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { NgForm } from '@angular/forms';\nimport { AngularEditorConfig } from '@kolkov/angular-editor';\nimport { Observable } from 'rxjs';\n\nimport { UserSkill } from '../../../auth/models/userskill.model';\nimport { UserSkillService } from '../../../auth/services/userskill.service';\nimport { Query } from '../../models/query.model';\nimport { QueryService } from '../../services/query.service';\n\n@Component({\n    selector: 'sb-addnewquery',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './addnewquery.component.html',\n    styleUrls: ['addnewquery.component.scss'],\n})\nexport class AddNewQueryComponent implements OnInit {\n    userSkills!: Observable<UserSkill[]>;\n    radioTitle = 'Category';\n    radioItems: Array<string> = ['Technical', 'Domain', 'Others'];\n\n    selectedOption = { category: 'Technical' };\n\n    model!: Query;\n\n    htmlContent = '';\n    public config: AngularEditorConfig = {\n        editable: true,\n        spellcheck: true,\n        height: '5rem',\n        minHeight: '15rem',\n        placeholder: '',\n        translate: 'no',\n        defaultParagraphSeparator: 'p',\n        defaultFontName: 'Arial',\n    };\n\n    constructor(private queryservice: QueryService, private userskillservice: UserSkillService) {}\n\n    ngOnInit() {\n        this.resetForm();\n        this.model = {\n            id: '',\n            title: '',\n            category: '',\n            querydesc: '',\n        };\n    }\n\n    resetForm(form?: NgForm) {\n        if (form != null) {\n            form.reset();\n        }\n    }\n\n    onSubmit(form: NgForm) {\n        // this.queryservice.formData.category = this.model.category;\n\n        // console.log(\"Selected category is :\", this.queryservice.formData.category);\n        // console.log(\"Selected title is :\", this.queryservice.formData.title);\n\n        this.queryservice.createQuery(this.model);\n        this.resetForm(form);\n        alert('Query Submitted successfully');\n    }\n\n    // update(query: Query) {\n    //     this.queryservice.updateQuery(query);\n    // }\n\n    // delete(id: string) {\n    //     this.queryservice.deleteQuery(id);\n    // }\n}\n","import { AddNewQueryComponent } from './addnewquery/addnewquery.component';\n\nexport const components = [AddNewQueryComponent];\n\nexport * from './addnewquery/addnewquery.component';\n","import { NewQueryComponent } from './newquery/newquery.component';\n\nexport const containers = [NewQueryComponent];\n\nexport * from './newquery/newquery.component';\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvbW9kdWxlcy9hZGRuZXdxdWVyeS9jb250YWluZXJzL25ld3F1ZXJ5L25ld3F1ZXJ5LmNvbXBvbmVudC5zY3NzIn0= */\";","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'sb-newquery',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './newquery.component.html',\n    styleUrls: ['newquery.component.scss'],\n})\nexport class NewQueryComponent implements OnInit {\n    constructor() {}\n    ngOnInit() {}\n}\n","import { SBSortableHeaderDirective } from './sortable.directive';\n\nexport const directives = [SBSortableHeaderDirective];\n\nexport * from './sortable.directive';\n","import { Directive, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';\n\nexport type SortDirection = 'asc' | 'desc' | '';\nconst rotate: { [key: string]: SortDirection } = { asc: 'desc', desc: '', '': 'asc' };\n\nexport interface SortEvent {\n    column: string;\n    direction: SortDirection;\n}\n\n@Directive({\n    selector: 'th[sbSortable]',\n})\nexport class SBSortableHeaderDirective {\n    @Input() sbSortable!: string;\n    @Input() direction: SortDirection = '';\n    @Output() sort = new EventEmitter<SortEvent>();\n\n    @HostBinding('class.asc') get isAscending() {\n        return this.direction === 'asc';\n    }\n    @HostBinding('class.desc') get isDescending() {\n        return this.direction === 'desc';\n    }\n    @HostListener('click') rotate() {\n        this.direction = rotate[this.direction];\n        this.sort.emit({ column: this.sbSortable, direction: this.direction });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\n@Injectable()\nexport class AddNewQueryGuard implements CanActivate {\n    canActivate(): Observable<boolean> {\n        return of(true);\n    }\n}\n","import { AddNewQueryGuard } from './addnewquery.guard';\n\nexport const guards = [AddNewQueryGuard];\n\nexport * from './addnewquery.guard';\n","import { QueryService } from './query.service';\nexport const services = [QueryService];\nexport * from './query.service';\n"]}