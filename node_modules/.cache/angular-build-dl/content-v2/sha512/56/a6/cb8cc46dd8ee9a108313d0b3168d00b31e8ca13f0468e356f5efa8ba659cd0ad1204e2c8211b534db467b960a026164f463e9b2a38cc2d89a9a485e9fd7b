{"version":3,"sources":["webpack:///src/modules/addnewpost/services/post.service.ts","webpack:///src/modules/addnewquery/services/query.service.ts","webpack:///src/modules/auth/services/userskill.service.ts"],"names":["PostService","fireStore","authService","t","collection","valueChanges","post","date","Date","id","getFullYear","getMonth","getDate","getTime","doc","set","update","isFAQ","postId","QueryService","query","queryId","UserSkillService","router","userSkills","userskill","add","userskillId"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,QAAaA,WAAW;AACpB,2BAAoBC,SAApB,EAAyDC,WAAzD,EAAmF;AAAA;;AAA/D,aAAAD,SAAA,GAAAA,SAAA;AAAqC,aAAAC,WAAA,GAAAA,WAAA;AAA4B;;AADjE;AAAA;AAAA,mCAGZ;AACJ,cAAMC,CAAC,GAA+B,KAAKF,SAAL,CAAeG,UAAf,CAAgC,MAAhC,CAAtC;AACA,iBAAOD,CAAC,CAACE,YAAF,EAAP;AACH;AANmB;AAAA;AAAA,mCAQTC,IARS,EAQG;AACnB,cAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,cAAMC,EAAE,GACJF,IAAI,CAACG,WAAL,KACA,GADA,GAEA,CAACH,IAAI,CAACI,QAAL,EAFD,GAGA,GAHA,GAIA,CAACJ,IAAI,CAACK,OAAL,EAJD,GAKA,GALA,GAMA,CAACL,IAAI,CAACM,OAAL,EAPL;AAQAP,cAAI,CAACG,EAAL,GAAUA,EAAV;AACA,iBAAO,KAAKR,SAAL,CAAeG,UAAf,CAA0B,MAA1B,EAAkCU,GAAlC,CAAsCL,EAAtC,EAA0CM,GAA1C,CAA8CT,IAA9C,CAAP;AACH;AApBmB;AAAA;AAAA,mCAsBTA,IAtBS,EAsBG;AACnB,eAAKL,SAAL,CAAea,GAAf,CAAmB,UAAUR,IAAI,CAACG,EAAlC,EAAsCO,MAAtC,CAA6CV,IAA7C;AACH;AAxBmB;AAAA;AAAA,qCA0BPA,IA1BO,EA0BK;AACrB,eAAKL,SAAL,CAAea,GAAf,CAAmB,UAAUR,IAAI,CAACG,EAAlC,EAAsCO,MAAtC,CAA6C;AAAEC,iBAAK,EAAE;AAAT,WAA7C;AACH;AA5BmB;AAAA;AAAA,mCA6BTC,MA7BS,EA6BO;AACvB,eAAKjB,SAAL,CAAea,GAAf,CAAmB,UAAUI,MAA7B;AACH;AA/BmB;;AAAA;AAAA,OAAxB;;;;cACmC;;cAAuC;;;;AAD7DlB,eAAW,6DADvB,kEACuB,E,+EACW,wE,EAAuC,kE,EADlD,GAAXA,WAAW,CAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAb,QAAamB,YAAY;AACrB,4BAAoBlB,SAApB,EAAyDC,WAAzD,EAAmF;AAAA;;AAA/D,aAAAD,SAAA,GAAAA,SAAA;AAAqC,aAAAC,WAAA,GAAAA,WAAA;AAA4B;;AADhE;AAAA;AAAA,qCAGX;AACN,cAAMC,CAAC,GAA+B,KAAKF,SAAL,CAAeG,UAAf,CAAiC,OAAjC,CAAtC;AACA,iBAAOD,CAAC,CAACE,YAAF,EAAP;AACH;AANoB;AAAA;AAAA,oCAQTe,KARS,EAQK;AACtB,cAAMb,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,cAAMC,EAAE,GACJF,IAAI,CAACG,WAAL,KACA,GADA,GAEA,CAACH,IAAI,CAACI,QAAL,EAFD,GAGA,GAHA,GAIA,CAACJ,IAAI,CAACK,OAAL,EAJD,GAKA,GALA,GAMA,CAACL,IAAI,CAACM,OAAL,EAPL;AAQAO,eAAK,CAACX,EAAN,GAAWA,EAAX;AACA,iBAAO,KAAKR,SAAL,CAAeG,UAAf,CAA0B,OAA1B,EAAmCU,GAAnC,CAAuCL,EAAvC,EAA2CM,GAA3C,CAA+CK,KAA/C,CAAP;AACH;AApBoB;AAAA;AAAA,oCAsBTA,KAtBS,EAsBK;AACtB,eAAKnB,SAAL,CAAea,GAAf,CAAmB,WAAWM,KAAK,CAACX,EAApC,EAAwCO,MAAxC,CAA+CI,KAA/C;AACH;AAxBoB;AAAA;AAAA,qCA0BRA,KA1BQ,EA0BM;AACvB,eAAKnB,SAAL,CAAea,GAAf,CAAmB,WAAWM,KAAK,CAACX,EAApC,EAAwCO,MAAxC,CAA+C;AAAEC,iBAAK,EAAE;AAAT,WAA/C;AACH;AA5BoB;AAAA;AAAA,oCA6BTI,OA7BS,EA6BQ;AACzB,eAAKpB,SAAL,CAAea,GAAf,CAAmB,WAAWO,OAA9B;AACH;AA/BoB;;AAAA;AAAA,OAAzB;;;;cACmC;;cAAuC;;;;AAD7DF,gBAAY,6DADxB,kEACwB,E,+EACU,wE,EAAuC,kE,EADjD,GAAZA,YAAY,CAAZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHb,QAAaG,gBAAgB;AAGzB,gCAAoBrB,SAApB,EAAyDsB,MAAzD,EAAyE;AAAA;;AAArD,aAAAtB,SAAA,GAAAA,SAAA;AAAqC,aAAAsB,MAAA,GAAAA,MAAA;AACrD,aAAKC,UAAL,GAAkB,KAAKvB,SAAL,CAAeG,UAAf,CAAqC,WAArC,EAAkDC,YAAlD,EAAlB;AACH;;AALwB;AAAA;AAAA,wCAOZ;AACT,iBAAO,KAAKmB,UAAZ;AACH;AATwB;AAAA;AAAA,wCAWTC,SAXS,EAWa;AAClC,iBAAO,KAAKxB,SAAL,CAAeG,UAAf,CAA0B,WAA1B,EAAuCsB,GAAvC,CAA2CD,SAA3C,CAAP;AACH;AAbwB;AAAA;AAAA,wCAeTA,SAfS,EAea;AAClC,iBAAOA,SAAS,CAAChB,EAAjB;AACA,eAAKR,SAAL,CAAea,GAAf,CAAmB,eAAeW,SAAS,CAAChB,EAA5C,EAAgDO,MAAhD,CAAuDS,SAAvD;AACH;AAlBwB;AAAA;AAAA,wCAoBTE,WApBS,EAoBY;AACjC,eAAK1B,SAAL,CAAea,GAAf,CAAmB,eAAea,WAAlC;AACH;AAtBwB;;AAAA;AAAA,OAA7B;;;;cAGmC;;cAAkC;;;;AAHxDL,oBAAgB,6DAD5B,kEAC4B,E,+EAGM,wE,EAAkC,sD,EAHxC,GAAhBA,gBAAgB,CAAhB","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n    AngularFirestore,\n    AngularFirestoreCollection,\n    AngularFirestoreCollectionGroup,\n} from '@angular/fire/firestore';\nimport { AuthService } from '@modules/auth/services';\nimport * as firebase from 'firebase/app';\nimport { Observable } from 'rxjs';\n\nimport { Post } from '../models/post.model';\n\n@Injectable()\nexport class PostService {\n    constructor(private fireStore: AngularFirestore, private authService: AuthService) {}\n\n    getPosts(): Observable<Post[]> {\n        const t: AngularFirestoreCollection = this.fireStore.collection<Post>('post');\n        return t.valueChanges();\n    }\n\n    createPost(post: Post) {\n        const date = new Date();\n        const id =\n            date.getFullYear() +\n            '_' +\n            +date.getMonth() +\n            '_' +\n            +date.getDate() +\n            '_' +\n            +date.getTime();\n        post.id = id;\n        return this.fireStore.collection('post').doc(id).set(post);\n    }\n\n    updatePost(post: Post) {\n        this.fireStore.doc('post/' + post.id).update(post);\n    }\n\n    setFAQstatus(post: Post) {\n        this.fireStore.doc('post/' + post.id).update({ isFAQ: 1 });\n    }\n    deletePost(postId: string) {\n        this.fireStore.doc('post/' + postId).delete();\n    }\n}","import { Injectable } from '@angular/core';\nimport {\n    AngularFirestore,\n    AngularFirestoreCollection,\n    AngularFirestoreCollectionGroup,\n} from '@angular/fire/firestore';\nimport { AuthService } from '@modules/auth/services';\nimport * as firebase from 'firebase/app';\nimport { Observable } from 'rxjs';\n\nimport { Query } from '../models/Query.model';\n\n@Injectable()\nexport class QueryService {\n    constructor(private fireStore: AngularFirestore, private authService: AuthService) {}\n\n    getQueries(): Observable<Query[]> {\n        const t: AngularFirestoreCollection = this.fireStore.collection<Query>('query');\n        return t.valueChanges();\n    }\n\n    createQuery(query: Query) {\n        const date = new Date();\n        const id =\n            date.getFullYear() +\n            '_' +\n            +date.getMonth() +\n            '_' +\n            +date.getDate() +\n            '_' +\n            +date.getTime();\n        query.id = id;\n        return this.fireStore.collection('query').doc(id).set(query);\n    }\n\n    updateQuery(query: Query) {\n        this.fireStore.doc('query/' + query.id).update(query);\n    }\n\n    setFAQstatus(query: Query) {\n        this.fireStore.doc('query/' + query.id).update({ isFAQ: 1 });\n    }\n    deleteQuery(queryId: string) {\n        this.fireStore.doc('query/' + queryId).delete();\n    }\n}","import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore, DocumentChangeAction } from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport * as firebase from 'firebase/app';\nimport { Observable, of } from 'rxjs';\n\nimport { UserSkill } from '../models/userskill.model';\n\n@Injectable()\nexport class UserSkillService {\n    userSkills!: Observable<UserSkill[]>;\n\n    constructor(private fireStore: AngularFirestore, private router: Router) {\n        this.userSkills = this.fireStore.collection<UserSkill>('userskill').valueChanges();\n    }\n\n    getUserSkills(): Observable<UserSkill[]> {\n        return this.userSkills;\n    }\n\n    createUserSkill(userskill: UserSkill) {\n        return this.fireStore.collection('userskill').add(userskill);\n    }\n\n    updateUserSkill(userskill: UserSkill) {\n        delete userskill.id;\n        this.fireStore.doc('userskill/' + userskill.id).update(userskill);\n    }\n\n    deleteUserSkill(userskillId: string) {\n        this.fireStore.doc('userskill/' + userskillId).delete();\n    }\n}\n"]}