"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CATEGORY_PUG = 'Pug';
function resolveAttributeSeparatorOption(attributeSeparator) {
    switch (attributeSeparator) {
        case 'always':
            return true;
        case 'as-needed':
            return false;
    }
    throw new Error(`Invalid option for pug attributeSeparator. Found '${attributeSeparator}'. Possible options: 'always' or 'as-needed'`);
}
exports.resolveAttributeSeparatorOption = resolveAttributeSeparatorOption;
function formatCommentPreserveSpaces(input, commentPreserveSpaces, pipeless = false) {
    switch (commentPreserveSpaces) {
        case 'keep-leading': {
            let result = '';
            let firstNonSpace = 0;
            for (firstNonSpace; firstNonSpace < input.length && input[firstNonSpace] === ' '; firstNonSpace++) {
                result += ' ';
            }
            result += input.slice(firstNonSpace).trim().replace(/\s\s+/g, ' ');
            return result;
        }
        case 'trim-all': {
            let result = input.trim();
            result = result.replace(/\s\s+/g, ' ');
            if (!pipeless && input[0] === ' ') {
                result = ` ${result}`;
            }
            return result;
        }
        case 'keep-all':
        default:
            return input;
    }
}
exports.formatCommentPreserveSpaces = formatCommentPreserveSpaces;
exports.options = {
    attributeSeparator: {
        since: '1.0.0',
        category: exports.CATEGORY_PUG,
        type: 'choice',
        default: 'always',
        description: 'Change when attributes are separated by commas in tags.',
        choices: [
            {
                value: 'always',
                description: 'Always separate attributes with commas. Example: `button(type="submit", (click)="play()", disabled)`'
            },
            {
                value: 'as-needed',
                description: 'Only add commas between attributes where required. Example: `button(type="submit", (click)="play()" disabled)`'
            }
        ]
    },
    commentPreserveSpaces: {
        since: '1.1.0',
        category: exports.CATEGORY_PUG,
        type: 'choice',
        default: 'keep-all',
        description: 'Change behavior of spaces within comments.',
        choices: [
            {
                value: 'keep-all',
                description: 'Keep all spaces within comments. Example: `//    this  is   a   comment`'
            },
            {
                value: 'keep-leading',
                description: 'Keep leading spaces within comments. Example: `//    this is a comment`'
            },
            {
                value: 'trim-all',
                description: 'Trim all spaces within comments. Example: `// this is a comment`'
            }
        ]
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvb3B0aW9ucy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFhLFFBQUEsWUFBWSxHQUFXLEtBQUssQ0FBQztBQVMxQyxTQUFnQiwrQkFBK0IsQ0FBQyxrQkFBMEM7SUFDekYsUUFBUSxrQkFBa0IsRUFBRTtRQUMzQixLQUFLLFFBQVE7WUFDWixPQUFPLElBQUksQ0FBQztRQUNiLEtBQUssV0FBVztZQUNmLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxNQUFNLElBQUksS0FBSyxDQUNkLHFEQUFxRCxrQkFBa0IsOENBQThDLENBQ3JILENBQUM7QUFDSCxDQUFDO0FBVkQsMEVBVUM7QUFFRCxTQUFnQiwyQkFBMkIsQ0FDMUMsS0FBYSxFQUNiLHFCQUE0QyxFQUM1QyxXQUFvQixLQUFLO0lBRXpCLFFBQVEscUJBQXFCLEVBQUU7UUFDOUIsS0FBSyxjQUFjLENBQUMsQ0FBQztZQUNwQixJQUFJLE1BQU0sR0FBVyxFQUFFLENBQUM7WUFDeEIsSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLEtBQUssYUFBYSxFQUFFLGFBQWEsR0FBRyxLQUFLLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEVBQUUsYUFBYSxFQUFFLEVBQUU7Z0JBQ2xHLE1BQU0sSUFBSSxHQUFHLENBQUM7YUFDZDtZQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDbkUsT0FBTyxNQUFNLENBQUM7U0FDZDtRQUNELEtBQUssVUFBVSxDQUFDLENBQUM7WUFDaEIsSUFBSSxNQUFNLEdBQVcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2xDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7Z0JBQ2xDLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO2FBQ3RCO1lBQ0QsT0FBTyxNQUFNLENBQUM7U0FDZDtRQUNELEtBQUssVUFBVSxDQUFDO1FBQ2hCO1lBRUMsT0FBTyxLQUFLLENBQUM7S0FDZDtBQUNGLENBQUM7QUE1QkQsa0VBNEJDO0FBRVksUUFBQSxPQUFPLEdBQUc7SUFDdEIsa0JBQWtCLEVBQUU7UUFDbkIsS0FBSyxFQUFFLE9BQU87UUFDZCxRQUFRLEVBQUUsb0JBQVk7UUFDdEIsSUFBSSxFQUFFLFFBQVE7UUFDZCxPQUFPLEVBQUUsUUFBUTtRQUNqQixXQUFXLEVBQUUseURBQXlEO1FBQ3RFLE9BQU8sRUFBRTtZQUNSO2dCQUNDLEtBQUssRUFBRSxRQUFRO2dCQUNmLFdBQVcsRUFDVixzR0FBc0c7YUFDdkc7WUFDRDtnQkFDQyxLQUFLLEVBQUUsV0FBVztnQkFDbEIsV0FBVyxFQUNWLGdIQUFnSDthQUNqSDtTQUNEO0tBQ0Q7SUFDRCxxQkFBcUIsRUFBRTtRQUN0QixLQUFLLEVBQUUsT0FBTztRQUNkLFFBQVEsRUFBRSxvQkFBWTtRQUN0QixJQUFJLEVBQUUsUUFBUTtRQUNkLE9BQU8sRUFBRSxVQUFVO1FBQ25CLFdBQVcsRUFBRSw0Q0FBNEM7UUFDekQsT0FBTyxFQUFFO1lBQ1I7Z0JBQ0MsS0FBSyxFQUFFLFVBQVU7Z0JBQ2pCLFdBQVcsRUFBRSwwRUFBMEU7YUFDdkY7WUFDRDtnQkFDQyxLQUFLLEVBQUUsY0FBYztnQkFDckIsV0FBVyxFQUFFLHlFQUF5RTthQUN0RjtZQUNEO2dCQUNDLEtBQUssRUFBRSxVQUFVO2dCQUNqQixXQUFXLEVBQUUsa0VBQWtFO2FBQy9FO1NBQ0Q7S0FDRDtDQUNELENBQUMifQ==