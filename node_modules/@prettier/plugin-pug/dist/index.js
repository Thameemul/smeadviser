"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lex = require("pug-lexer");
const logger_1 = require("./logger");
const options_1 = require("./options");
const printer_1 = require("./printer");
const logger = logger_1.createLogger(console);
if (process.env.NODE_ENV === 'test') {
    logger.setLogLevel(logger_1.LogLevel.DEBUG);
}
exports.plugin = {
    languages: [
        {
            name: 'Pug',
            parsers: ['pug'],
            tmScope: 'text.jade',
            aceMode: 'jade',
            codemirrorMode: 'pug',
            codemirrorMimeType: 'text/x-pug',
            extensions: ['.jade', '.pug'],
            linguistLanguageId: 179,
            vscodeLanguageIds: ['jade']
        }
    ],
    parsers: {
        pug: {
            parse(text, parsers, options) {
                logger.debug('[parsers:pug:parse]:', { text });
                const tokens = lex(text);
                return tokens;
            },
            astFormat: 'pug-ast',
            hasPragma(text) {
                return text.startsWith('//- @prettier\n') || text.startsWith('//- @format\n');
            },
            locStart(node) {
                logger.debug('[parsers:pug:locStart]:', { node });
                return 0;
            },
            locEnd(node) {
                logger.debug('[parsers:pug:locEnd]:', { node });
                return 0;
            },
            preprocess(text, options) {
                logger.debug('[parsers:pug:preprocess]:', { text });
                return text;
            }
        }
    },
    printers: {
        'pug-ast': {
            print(path, { printWidth, singleQuote, tabWidth, useTabs, attributeSeparator, commentPreserveSpaces, semi }, print) {
                const tokens = path.stack[0];
                const printer = new printer_1.PugPrinter(tokens, {
                    printWidth,
                    singleQuote,
                    tabWidth,
                    useTabs,
                    attributeSeparator,
                    commentPreserveSpaces,
                    semi
                });
                const result = printer.build();
                logger.debug('[printers:pug-ast:print]:', result);
                return result;
            },
            embed(path, print, textToDoc, options) {
                return null;
            },
            insertPragma(text) {
                return `//- @prettier\n${text}`;
            }
        }
    },
    options: options_1.options,
    defaultOptions: {}
};
exports.languages = exports.plugin.languages;
exports.parsers = exports.plugin.parsers;
exports.printers = exports.plugin.printers;
exports.options = exports.plugin.options;
exports.defaultOptions = exports.plugin.defaultOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxpQ0FBaUM7QUFFakMscUNBQTBEO0FBQzFELHVDQUFvRTtBQUNwRSx1Q0FBdUM7QUFFdkMsTUFBTSxNQUFNLEdBQVcscUJBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3QyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFBRTtJQUNwQyxNQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbkM7QUFFWSxRQUFBLE1BQU0sR0FBVztJQUM3QixTQUFTLEVBQUU7UUFDVjtZQUNDLElBQUksRUFBRSxLQUFLO1lBQ1gsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ2hCLE9BQU8sRUFBRSxXQUFXO1lBQ3BCLE9BQU8sRUFBRSxNQUFNO1lBQ2YsY0FBYyxFQUFFLEtBQUs7WUFDckIsa0JBQWtCLEVBQUUsWUFBWTtZQUNoQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDO1lBQzdCLGtCQUFrQixFQUFFLEdBQUc7WUFDdkIsaUJBQWlCLEVBQUUsQ0FBQyxNQUFNLENBQUM7U0FDM0I7S0FDRDtJQUNELE9BQU8sRUFBRTtRQUNSLEdBQUcsRUFBRTtZQUNKLEtBQUssQ0FBQyxJQUFZLEVBQUUsT0FBeUMsRUFBRSxPQUFzQjtnQkFDcEYsTUFBTSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQy9DLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFJekIsT0FBTyxNQUFNLENBQUM7WUFDZixDQUFDO1lBQ0QsU0FBUyxFQUFFLFNBQVM7WUFDcEIsU0FBUyxDQUFDLElBQVk7Z0JBQ3JCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDL0UsQ0FBQztZQUNELFFBQVEsQ0FBQyxJQUFTO2dCQUNqQixNQUFNLENBQUMsS0FBSyxDQUFDLHlCQUF5QixFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDbEQsT0FBTyxDQUFDLENBQUM7WUFDVixDQUFDO1lBQ0QsTUFBTSxDQUFDLElBQVM7Z0JBQ2YsTUFBTSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQ2hELE9BQU8sQ0FBQyxDQUFDO1lBQ1YsQ0FBQztZQUNELFVBQVUsQ0FBQyxJQUFZLEVBQUUsT0FBc0I7Z0JBQzlDLE1BQU0sQ0FBQyxLQUFLLENBQUMsMkJBQTJCLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUNwRCxPQUFPLElBQUksQ0FBQztZQUNiLENBQUM7U0FDRDtLQUNEO0lBQ0QsUUFBUSxFQUFFO1FBQ1QsU0FBUyxFQUFFO1lBQ1YsS0FBSyxDQUNKLElBQWMsRUFDZCxFQUNDLFVBQVUsRUFDVixXQUFXLEVBQ1gsUUFBUSxFQUNSLE9BQU8sRUFDUCxrQkFBa0IsRUFDbEIscUJBQXFCLEVBQ3JCLElBQUksRUFDOEIsRUFDbkMsS0FBOEI7Z0JBRTlCLE1BQU0sTUFBTSxHQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLE1BQU0sT0FBTyxHQUFHLElBQUksb0JBQVUsQ0FBQyxNQUFNLEVBQUU7b0JBQ3RDLFVBQVU7b0JBQ1YsV0FBVztvQkFDWCxRQUFRO29CQUNSLE9BQU87b0JBQ1Asa0JBQWtCO29CQUNsQixxQkFBcUI7b0JBQ3JCLElBQUk7aUJBQ0osQ0FBQyxDQUFDO2dCQUNILE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDL0IsTUFBTSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDbEQsT0FBTyxNQUFNLENBQUM7WUFDZixDQUFDO1lBQ0QsS0FBSyxDQUNKLElBQWMsRUFDZCxLQUE4QixFQUM5QixTQUFrRCxFQUNsRCxPQUFzQjtnQkFHdEIsT0FBTyxJQUFJLENBQUM7WUFDYixDQUFDO1lBQ0QsWUFBWSxDQUFDLElBQVk7Z0JBQ3hCLE9BQU8sa0JBQWtCLElBQUksRUFBRSxDQUFDO1lBQ2pDLENBQUM7U0FDRDtLQUNEO0lBQ0QsT0FBTyxFQUFFLGlCQUFpQjtJQUMxQixjQUFjLEVBQUUsRUFBRTtDQUNsQixDQUFDO0FBRVcsUUFBQSxTQUFTLEdBQUcsY0FBTSxDQUFDLFNBQVMsQ0FBQztBQUM3QixRQUFBLE9BQU8sR0FBRyxjQUFNLENBQUMsT0FBTyxDQUFDO0FBQ3pCLFFBQUEsUUFBUSxHQUFHLGNBQU0sQ0FBQyxRQUFRLENBQUM7QUFDM0IsUUFBQSxPQUFPLEdBQUcsY0FBTSxDQUFDLE9BQU8sQ0FBQztBQUN6QixRQUFBLGNBQWMsR0FBRyxjQUFNLENBQUMsY0FBYyxDQUFDIn0=