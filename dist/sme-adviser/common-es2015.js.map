{"version":3,"sources":["./src/modules/addnewpost/services/post.service.ts","./src/modules/addnewquery/services/query.service.ts","./src/modules/auth/services/userskill.service.ts"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n    AngularFirestore,\n    AngularFirestoreCollection,\n    AngularFirestoreCollectionGroup,\n} from '@angular/fire/firestore';\nimport { AuthService } from '@modules/auth/services';\nimport * as firebase from 'firebase/app';\nimport { Observable } from 'rxjs';\n\nimport { Post } from '../models/post.model';\n\n@Injectable()\nexport class PostService {\n    constructor(private fireStore: AngularFirestore, private authService: AuthService) {}\n\n    getPosts(): Observable<Post[]> {\n        const t: AngularFirestoreCollection = this.fireStore.collection<Post>('post');\n        return t.valueChanges();\n    }\n\n    createPost(post: Post) {\n        const date = new Date();\n        const id =\n            date.getFullYear() +\n            '_' +\n            +date.getMonth() +\n            '_' +\n            +date.getDate() +\n            '_' +\n            +date.getTime();\n        post.id = id;\n        return this.fireStore.collection('post').doc(id).set(post);\n    }\n\n    updatePost(post: Post) {\n        this.fireStore.doc('post/' + post.id).update(post);\n    }\n\n    setFAQstatus(post: Post) {\n        this.fireStore.doc('post/' + post.id).update({ isFAQ: 1 });\n    }\n    deletePost(postId: string) {\n        this.fireStore.doc('post/' + postId).delete();\n    }\n}","import { Injectable } from '@angular/core';\nimport {\n    AngularFirestore,\n    AngularFirestoreCollection,\n    AngularFirestoreCollectionGroup,\n} from '@angular/fire/firestore';\nimport { AuthService } from '@modules/auth/services';\nimport * as firebase from 'firebase/app';\nimport { Observable } from 'rxjs';\n\nimport { Query } from '../models/Query.model';\n\n@Injectable()\nexport class QueryService {\n    constructor(private fireStore: AngularFirestore, private authService: AuthService) {}\n\n    getQueries(): Observable<Query[]> {\n        const t: AngularFirestoreCollection = this.fireStore.collection<Query>('query');\n        return t.valueChanges();\n    }\n\n    createQuery(query: Query) {\n        const date = new Date();\n        const id =\n            date.getFullYear() +\n            '_' +\n            +date.getMonth() +\n            '_' +\n            +date.getDate() +\n            '_' +\n            +date.getTime();\n        query.id = id;\n        return this.fireStore.collection('query').doc(id).set(query);\n    }\n\n    updateQuery(query: Query) {\n        this.fireStore.doc('query/' + query.id).update(query);\n    }\n\n    setFAQstatus(query: Query) {\n        this.fireStore.doc('query/' + query.id).update({ isFAQ: 1 });\n    }\n    deleteQuery(queryId: string) {\n        this.fireStore.doc('query/' + queryId).delete();\n    }\n}","\nimport { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore, DocumentChangeAction } from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport * as firebase from 'firebase/app';\nimport { Observable, of } from 'rxjs';\n\nimport { UserSkill } from '../models/userskill.model';\n\n@Injectable()\nexport class UserSkillService {\n    userSkills!: Observable<UserSkill[]>;\n\n    constructor(private fireStore: AngularFirestore, private router: Router) {\n        this.userSkills = this.fireStore.collection<UserSkill>('userskill').valueChanges();\n    }\n\n    getUserSkills(): Observable<UserSkill[]> {\n        return this.userSkills;\n    }\n\n    createUserSkill(userskill: UserSkill) {\n        return this.fireStore.collection('userskill').doc(userskill.id).set(userskill);\n    }\n\n    updateUserSkill(userskill: UserSkill) {\n        // delete userskill.id;\n        this.fireStore.doc('userskill/' + userskill.id).update(userskill);\n    }\n\n    deleteUserSkill(userskillId: string) {\n        this.fireStore.doc('userskill/' + userskillId).delete();\n    }\n}\n"],"sourceRoot":"webpack:///"}